name: CI/CD Pipeline

on:
  push:
    branches:
      - main
    paths:
      - template.yaml
      - index.html
      - '.github/workflows/**'

jobs:
  update-openstack-stack:
    runs-on: self-hosted
    env:
      OS_AUTH_URL: ${{ secrets.OS_AUTH_URL }}
      OS_PROJECT_ID: ${{ secrets.OS_PROJECT_ID }}
      OS_PROJECT_NAME: ${{ secrets.OS_PROJECT_NAME }}
      OS_USERNAME: ${{ secrets.OS_USERNAME }}
      OS_PASSWORD: ${{ secrets.OS_PASSWORD }}
      OS_REGION_NAME: ${{ secrets.OS_REGION_NAME }}
      OS_USER_DOMAIN_NAME: ${{ secrets.OS_USER_DOMAIN_NAME }}
      OS_PROJECT_DOMAIN_NAME: ${{ secrets.OS_PROJECT_DOMAIN_NAME }}
      OS_INTERFACE: public
      OS_IDENTITY_API_VERSION: ${{ secrets.OS_IDENTITY_API_VERSION }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install OpenStack CLI and Heat Client
        run: |
          sudo apt update
          sudo apt install -y python3-openstackclient
          pip install python-heatclient
          pip install python-openstackclient

      - name: Authenticate with OpenStack
        run: echo "Authenticated with OpenStack"

      - name: Debug OpenStack Connection
        run: |
          echo "Testing connectivity to OpenStack authentication URL..."
          curl -v $OS_AUTH_URL || echo "Could not reach OpenStack authentication URL"

      - name: Test OpenStack Authentication
        run: |
          echo "Attempting to issue a token..."
          openstack token issue || echo "Failed to authenticate with OpenStack"

      - name: Update Stack in OpenStack
        run: |
          echo "Updating OpenStack stack..."
          openstack stack update --template template.yaml Portfolio-Stack || echo "Failed to update the stack"

  test-stack:
    needs: update-openstack-stack
    runs-on: self-hosted
    env:
      OS_AUTH_URL: ${{ secrets.OS_AUTH_URL }}
      OS_PROJECT_ID: ${{ secrets.OS_PROJECT_ID }}
      OS_PROJECT_NAME: ${{ secrets.OS_PROJECT_NAME }}
      OS_USERNAME: ${{ secrets.OS_USERNAME }}
      OS_PASSWORD: ${{ secrets.OS_PASSWORD }}
      OS_REGION_NAME: ${{ secrets.OS_REGION_NAME }}
      OS_USER_DOMAIN_NAME: ${{ secrets.OS_USER_DOMAIN_NAME }}
      OS_PROJECT_DOMAIN_NAME: ${{ secrets.OS_PROJECT_DOMAIN_NAME }}
      OS_INTERFACE: public
      OS_IDENTITY_API_VERSION: ${{ secrets.OS_IDENTITY_API_VERSION }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install OpenStack CLI and Heat Client
        run: |
          sudo apt update
          sudo apt install -y python3-openstackclient
          sudo apt install -y jq
          sudo apt install -y python3 python3-venv
          python3 -m venv myenv
          source myenv/bin/activate
          pip install --upgrade pip
          pip install python-heatclient
          pip install python-openstackclient

      - name: Print Environment Variables
        run: |
          echo "OS_AUTH_URL: $OS_AUTH_URL"
          echo "OS_PROJECT_ID: $OS_PROJECT_ID"
          echo "OS_PROJECT_NAME: $OS_PROJECT_NAME"
          echo "OS_REGION_NAME: $OS_REGION_NAME"
          echo "OS_USER_DOMAIN_NAME: $OS_USER_DOMAIN_NAME"
          echo "OS_PROJECT_DOMAIN_NAME: $OS_PROJECT_DOMAIN_NAME"
          echo "OS_INTERFACE: $OS_INTERFACE"
          echo "OS_IDENTITY_API_VERSION: $OS_IDENTITY_API_VERSION"

      - name: Test OpenStack Authentication
        run: |
          echo "Attempting to issue a token..."
          openstack --debug token issue || (echo "Failed to authenticate with OpenStack" && exit 1)



      - name: Install Netcat and Apache Benchmark
        run: |
          sudo apt install -y netcat apache2-utils

      - name: Print Environment Variables
        run: |
          echo "OS_AUTH_URL: $OS_AUTH_URL"
          echo "OS_PROJECT_ID: $OS_PROJECT_ID"
          echo "OS_USERNAME: $OS_USERNAME"
          echo "OS_PASSWORD: $OS_PASSWORD"
          echo "OS_REGION_NAME: $OS_REGION_NAME"
          echo "OS_USER_DOMAIN_NAME: $OS_USER_DOMAIN_NAME"
          echo "OS_INTERFACE: $OS_INTERFACE"
          echo "OS_IDENTITY_API_VERSION: $OS_IDENTITY_API_VERSION"

      - name: Authenticate with OpenStack
        run: echo "Authenticated with OpenStack"

      - name: Instance Status Check
        run: |
          openstack server list | grep "ACTIVE" || (echo "Instance status check failed" && exit 1)

      - name: Resource Limits Test
        run: |
          openstack server show Portfolio-Ubuntu-Instance -f json | jq '.flavor' | grep "gx3.2c3r" || (echo "Resource limits check failed" && exit 1)

      - name: Connectivity Test with curl
        run: |
          curl -s -I http://10.212.27.244 || (echo "Connectivity test failed" && exit 1)

      - name: Security Group Test
        run: |
          openstack security group rule list 3a02cd53-6770-4f12-a5a5-6d5d2393a8f6 || (echo "Security group test failed" && exit 1)

      - name: Port Test
        run: |
          nc -zv 10.212.27.244 22 && echo "Port 22 open" || (echo "Port 22 is not open" && exit 1)

      - name: Service Availability Check
        run: |
          curl -I http://10.212.27.244 || (echo "Service availability check failed" && exit 1)

      - name: Check Website Content
        run: |
          curl -s http://10.212.27.244 | grep "<title>Portfolio Website</title>" || (echo "Content check failed" && exit 1)

      - name: HTTP Status Code Check
        run: |
          curl -s -o /dev/null -w "%{http_code}" http://10.212.27.244 | grep 200 || (echo "HTTP status code check failed" && exit 1)

      - name: Apache Response Time Check
        run: |
          time curl -s -o /dev/null http://10.212.27.244 || (echo "Response time check failed" && exit 1)

      - name: Basic Load Test
        run: |
          ab -n 50 -c 10 http://10.212.27.244/ || (echo "Load test failed" && exit 1)


  deploy-hello-world:
    runs-on: self-hosted
    env:
      OS_AUTH_URL: ${{ secrets.OS_AUTH_URL }}
      OS_PROJECT_ID: ${{ secrets.OS_PROJECT_ID }}
      OS_PROJECT_NAME: ${{ secrets.OS_PROJECT_NAME }}
      OS_USERNAME: ${{ secrets.OS_USERNAME }}
      OS_PASSWORD: ${{ secrets.OS_PASSWORD }}
      OS_REGION_NAME: ${{ secrets.OS_REGION_NAME }}
      OS_USER_DOMAIN_NAME: ${{ secrets.OS_USER_DOMAIN_NAME }}
      OS_PROJECT_DOMAIN_NAME: ${{ secrets.OS_PROJECT_DOMAIN_NAME }}
      OS_INTERFACE: public
      OS_IDENTITY_API_VERSION: ${{ secrets.OS_IDENTITY_API_VERSION }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Decode and Set up SSH Key
        run: |
          echo "${{ secrets.SSH_KEY_BASE64 }}" | base64 -d > temp-key.pem
          chmod 600 temp-key.pem

      - name: Debug SSH Key Permissions
        run: |
          ls -l temp-key.pem
          file temp-key.pem
          ssh -i temp-key.pem -o StrictHostKeyChecking=no ubuntu@10.212.27.244 "echo 'SSH Key is working'"

      - name: Copy HTML File to Server
        run: |
          scp -i temp-key.pem -o StrictHostKeyChecking=no ./index.html ubuntu@10.212.27.244:/tmp/

      - name: Move HTML to Web Directory on Server
        run: |
          ssh -i temp-key.pem -o StrictHostKeyChecking=no ubuntu@10.212.27.244 "sudo mv /tmp/index.html /var/www/html/ && sudo systemctl restart apache2"

      - name: Cleanup SSH Key
        run: |
          rm -f temp-key.pem
