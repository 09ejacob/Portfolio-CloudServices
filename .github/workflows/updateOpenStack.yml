name: CI/CD Pipeline

on:
  push:
    branches:
      - main
    paths:
      - template.yaml
      - '.github/workflows/**'
      - 'backend/**'
      - 'frontend/**'

env:
  OS_AUTH_URL: ${{ secrets.OS_AUTH_URL }}
  OS_PROJECT_ID: ${{ secrets.OS_PROJECT_ID }}
  OS_PROJECT_NAME: ${{ secrets.OS_PROJECT_NAME }}
  OS_USERNAME: ${{ secrets.OS_USERNAME }}
  OS_PASSWORD: ${{ secrets.OS_PASSWORD }}
  OS_REGION_NAME: ${{ secrets.OS_REGION_NAME }}
  OS_USER_DOMAIN_NAME: ${{ secrets.OS_USER_DOMAIN_NAME }}
  OS_PROJECT_DOMAIN_NAME: ${{ secrets.OS_PROJECT_DOMAIN_NAME }}
  OS_INTERFACE: public
  OS_IDENTITY_API_VERSION: ${{ secrets.OS_IDENTITY_API_VERSION }}
  FRONTEND_SERVER_IP: ${{ secrets.FRONTEND_SERVER_IP }}
  BACKEND_SERVER_IP: ${{ secrets.BACKEND_SERVER_IP }}

jobs:
  # Job: Setup Environment
  setup-environment:
    runs-on: ubuntu-latest
    steps:
      - name: Install Dependencies
        run: |
          sudo apt update
          sudo apt install -y python3 python3-venv jq netcat apache2-utils
          pip install --upgrade pip
          pip install --upgrade python-openstackclient python-heatclient
          sudo apt install -y nodejs npm

  # Job: Backend Unit Tests
  backend-unit-tests:
    runs-on: ubuntu-latest
    needs: setup-environment
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Install Backend Dependencies
        run: |
          cd backend
          python3 -m venv venv
          source venv/bin/activate
          pip install flask
          pip install flask-cors

      - name: Run Backend Unit Tests
        run: |
          cd backend
          source venv/bin/activate
          python3 -m unittest discover -s tests


  # Job: Frontend Unit Tests
  frontend-unit-tests:
    runs-on: ubuntu-latest
    needs: setup-environment
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Install Node.js Dependencies
        run: |
          cd frontend
          npm install

      - name: Run Frontend Unit Tests
        run: |
          cd frontend
          npm test


  # Job: Update OpenStack Stack
  update-openstack-stack:
    runs-on: ubuntu-latest
    needs: [backend-unit-tests, frontend-unit-tests]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Authenticate and Update Stack
        run: |
          echo "Attempting to issue a token..."
          openstack token issue
          echo "Updating OpenStack stack..."
          openstack stack update --template template.yaml Portfolio-Stack

  # Job: Deploy Backend
  deploy-backend:
    runs-on: ubuntu-latest
    needs: update-openstack-stack
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Decode SSH Key
        run: |
          echo "${{ secrets.SSH_KEY_BASE64_BACKEND }}" | base64 -d > temp-backend-key.pem
          chmod 600 temp-backend-key.pem

      - name: Copy Backend Files to Server
        run: |
          scp -i temp-backend-key.pem -o StrictHostKeyChecking=no -r ./backend ubuntu@$BACKEND_SERVER_IP:/tmp/backend

      - name: Install Backend Dependencies
        run: |
          ssh -i temp-backend-key.pem -o StrictHostKeyChecking=no ubuntu@$BACKEND_SERVER_IP "sudo apt update && sudo apt install -y python3 python3-venv && python3 -m venv /tmp/backend/venv && /tmp/backend/venv/bin/pip install -r /tmp/backend/requirements.txt"

      - name: Start Backend
        run: |
          ssh -i temp-backend-key.pem -o StrictHostKeyChecking=no ubuntu@$BACKEND_SERVER_IP "nohup /tmp/backend/venv/bin/python3 /tmp/backend/app.py > /tmp/backend/backend.log 2>&1 &"

      - name: Cleanup SSH Key
        run: rm -f temp-backend-key.pem

  # Job: Deploy Frontend
  deploy-frontend:
    runs-on: ubuntu-latest
    needs: deploy-backend
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Decode SSH Key
        run: |
          echo "${{ secrets.SSH_KEY_BASE64_FRONTEND }}" | base64 -d > temp-frontend-key.pem
          chmod 600 temp-frontend-key.pem

      - name: Copy Frontend Files to Server
        run: |
          scp -i temp-frontend-key.pem -o StrictHostKeyChecking=no ./frontend/index.html ubuntu@$FRONTEND_SERVER_IP:/tmp/

      - name: Deploy Frontend
        run: |
          ssh -i temp-frontend-key.pem -o StrictHostKeyChecking=no ubuntu@$FRONTEND_SERVER_IP "sudo mv /tmp/index.html /var/www/html/ && sudo systemctl restart apache2"

      - name: Cleanup SSH Key
        run: rm -f temp-frontend-key.pem

  # Job: Connectivity and Service Tests
  connectivity-and-service-tests:
    runs-on: ubuntu-latest
    needs: [deploy-frontend, deploy-backend]
    steps:
      - name: Port 22 Test on Frontend
        run: |
          nc -zv $FRONTEND_SERVER_IP 22 || (echo "Port 22 on Frontend is not open" && exit 1)
