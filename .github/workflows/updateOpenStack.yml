name: CI/CD Pipeline

on:
  push:
    branches:
      - main
    paths:
      - template.yaml
      - index.html
      - '.github/workflows/**'

env:
  OS_AUTH_URL: ${{ secrets.OS_AUTH_URL }}
  OS_PROJECT_ID: ${{ secrets.OS_PROJECT_ID }}
  OS_PROJECT_NAME: ${{ secrets.OS_PROJECT_NAME }}
  OS_USERNAME: ${{ secrets.OS_USERNAME }}
  OS_PASSWORD: ${{ secrets.OS_PASSWORD }}
  OS_REGION_NAME: ${{ secrets.OS_REGION_NAME }}
  OS_USER_DOMAIN_NAME: ${{ secrets.OS_USER_DOMAIN_NAME }}
  OS_PROJECT_DOMAIN_NAME: ${{ secrets.OS_PROJECT_DOMAIN_NAME }}
  OS_INTERFACE: public
  OS_IDENTITY_API_VERSION: ${{ secrets.OS_IDENTITY_API_VERSION }}

jobs:
  # Job: Setup Environment
  setup-environment:
    runs-on: self-hosted
    steps:
      - name: Install Dependencies
        run: |
          sudo apt update
          sudo apt install -y python3-openstackclient python3-venv jq netcat apache2-utils
          pip install --upgrade pip
          pip install --upgrade python-openstackclient python-heatclient

  # Job: Update OpenStack Stack
  update-openstack-stack:
    runs-on: self-hosted
    needs: setup-environment
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Authenticate and Update Stack
        run: |
          echo "Attempting to issue a token..."
          openstack token issue
          echo "Updating OpenStack stack..."
          openstack stack update --template template.yaml Portfolio-Stack

  # Job: Test OpenStack Stack
  test-openstack-stack:
    runs-on: self-hosted
    needs: update-openstack-stack
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Instance Status Check
        run: |
          openstack server list --status ACTIVE --name Portfolio-Ubuntu-Instance | grep "Portfolio-Ubuntu-Instance" || (echo "Instance is not active" && exit 1)

      - name: Resource Limits Test
        run: |
          openstack server show Portfolio-Ubuntu-Instance -f value -c flavor | grep "gx3.2c3r" || (echo "Resource limits check failed" && exit 1)

      - name: Security Group Test
        run: |
          openstack security group list -f value -c ID | xargs -I {} openstack security group rule list {} || (echo "Security group test failed" && exit 1)

  # Job: Connectivity and Service Tests
  connectivity-and-service-tests:
    runs-on: self-hosted
    needs: test-openstack-stack
    outputs:
      server_ip: ${{ steps.get_ip.outputs.server_ip }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Get Server IP
        id: get_ip
        run: |
          SERVER_OUTPUT=$(openstack server show Portfolio-Ubuntu-Instance -f value -c addresses)
          echo "OpenStack Output: $SERVER_OUTPUT"
          SERVER_IP=$(echo "$SERVER_OUTPUT" | awk -F'=' '{print $2}' | tr -d ' ')
          echo "Retrieved SERVER_IP: $SERVER_IP"
          echo "server_ip=$SERVER_IP" >> $GITHUB_OUTPUT

      - name: Verify SERVER_IP
        run: |
          if [ -z "${{ steps.get_ip.outputs.server_ip }}" ]; then
            echo "Failed to retrieve SERVER_IP"
            exit 1
          fi

      - name: Debug SERVER_IP
        run: echo "SERVER_IP is ${{ steps.get_ip.outputs.server_ip }}"

      - name: Port 22 Test
        run: |
          nc -zv ${{ steps.get_ip.outputs.server_ip }} 22 || (echo "Port 22 is not open" && exit 1)

      - name: HTTP Connectivity Test
        run: |
          curl -s -I http://${{ steps.get_ip.outputs.server_ip }} || (echo "HTTP connectivity test failed" && exit 1)

      - name: Check Website Content
        run: |
          curl -s http://${{ steps.get_ip.outputs.server_ip }} | grep "<title>Portfolio Website</title>" || (echo "Content check failed" && exit 1)

      - name: HTTP Status Code Check
        run: |
          STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://${{ steps.get_ip.outputs.server_ip }})
          [ "$STATUS_CODE" -eq 200 ] || (echo "Expected HTTP status 200, got $STATUS_CODE" && exit 1)

      - name: Response Time Check
        run: |
          RESPONSE_TIME=$(curl -o /dev/null -s -w "%{time_total}\n" http://${{ steps.get_ip.outputs.server_ip }})
          MAX_TIME=2.0
          (( $(echo "$RESPONSE_TIME < $MAX_TIME" | bc -l) )) || (echo "Response time $RESPONSE_TIME exceeds $MAX_TIME seconds" && exit 1)

      - name: Basic Load Test
        run: |
          ab -n 50 -c 10 http://${{ steps.get_ip.outputs.server_ip }}/ || (echo "Load test failed" && exit 1)

  # Job: Deploy HTML Content
  deploy-html-content:
    runs-on: self-hosted
    needs: connectivity-and-service-tests
    env:
      SERVER_IP: ${{ needs.connectivity-and-service-tests.outputs.server_ip }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Decode SSH Key
        run: |
          echo "${{ secrets.SSH_KEY_BASE64 }}" | base64 -d > temp-key.pem
          chmod 600 temp-key.pem

      - name: Debug SERVER_IP
        run: echo "SERVER_IP is $SERVER_IP"

      - name: Copy HTML File to Server
        run: |
          scp -i temp-key.pem -o StrictHostKeyChecking=no ./index.html ubuntu@$SERVER_IP:/tmp/

      - name: Deploy HTML to Web Directory
        run: |
          ssh -i temp-key.pem -o StrictHostKeyChecking=no ubuntu@$SERVER_IP "sudo mv /tmp/index.html /var/www/html/ && sudo systemctl restart apache2"

      - name: Cleanup SSH Key
        run: rm -f temp-key.pem
